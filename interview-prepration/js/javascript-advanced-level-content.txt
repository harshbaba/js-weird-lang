2.Event Loop
https://flaviocopes.com/javascript-event-loop/
https://medium.com/front-end-weekly/javascript-event-loop-explained-4cd26af121d4
https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40
https://www.youtube.com/watch?v=8aGhZQkoFbQ

3.Page Performance & Optimization
a. HTTP requests reduction
b.File compression
c.Web caching optimization
d.Code minification
e.Image Optimization 
f.Avoid Redirects
g.SSL certificate/ HTTPS


https://apiumhub.com/tech-blog-barcelona/web-performance-optimization-techniques/


14.JavaScript Design Patterns
a.Module Design Pattern
b.Prototype Design Pattern
c.Observer Design Pattern
d.Singleton

https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know


15.Module Formats
16.Module Loaders
17.Module Bundlers

To better understand tooling in modern JavaScript development environments, it is important to understand the differences between modules,
module formats, module loaders and module bundlers.
A module is a reusable piece of code that encapsulates implementation details and exposes a public API so it can be easily loaded and used
by other code.
A module format is the syntax we use to define a module. Different module formats such AMD, CommonJS, UMD and System.register 
have emerged in the past and a native module format is now available since ES6.
A module loader interprets and loads a module written in a certain module format at runtime. Popular examples are RequireJS and SystemJS.
A module bundler replaces a module loader and generates a bundle of all code at build time. Popular examples are Browserify and Webpack.

https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/
https://stackoverflow.com/questions/38864933/what-is-difference-between-module-loader-and-module-bundler-in-javascript

18.Shadow Dom
19.Virtual Dom
https://www.stackchief.com/blog/Shadow%20DOM%20vs%20Virtual%20DOM